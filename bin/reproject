#!/usr/bin/env python3

import argparse
import datetime
import json
import logging
import os
import re
import shutil
import subprocess
import sys
import traceback

# Note: the trailing space seems to be the only way to add an extra trailing line
EPILOG_STR = """
Examples

   $ {script_name} -b bluesky-output/ -p epsg:3857 -q WGS84 -i images-pm25 -o images-pm25-WGS84
 """.format(script_name=sys.argv[0])

def parse_args():
    parser = argparse.ArgumentParser()
    parser.epilog = EPILOG_STR
    parser.formatter_class = argparse.RawTextHelpFormatter

    # Required
    parser.add_argument("-b", "--bluesky-output-dir", required=True,
        help="Output directory containing grid_info.json file")

    parser.add_argument("-p", "--input-projection", required=True,
        help="WGS84 or merc")
    parser.add_argument("-q", "--output-projection", required=True,
        help="WGS84 or merc")

    # Optional
    parser.add_argument("-i", "--input-images-dir", default="images-pm25",
        help="defaults to 'images-pm25")
    parser.add_argument("-o", "--output-images-dir",
        help="defailts to input image dir")

    return parser.parse_args()


class ImageReprojector(object):

    SUPPORTED_PROJECTIONS = {
        'EPSG:4326': 'EPSG:4326',
        'WGS84': 'EPSG:4326',
        'EPSG:3857': 'EPSG:3857',
        'MERC': 'EPSG:3857',
    }

    def __init__(self, args):
        self.set_projections(args)
        self.set_bluesky_output_dir(args)
        self.read_grid_info()
        self.set_image_dirs(args)
        self.backup_images()

    ## Initialization

    def set_projections(self, args):
        self.input_projection = self.SUPPORTED_PROJECTIONS.get(args.input_projection.upper())
        if not self.input_projection:
            raise NotImplementedError(
                f"Unsupported input projection: {args.input_projection}")

        self.output_projection = self.SUPPORTED_PROJECTIONS.get(args.output_projection.upper())
        if not self.output_projection:
            raise NotImplementedError(
                f"Unsupported output projection: {args.output_projection}")

        logging.info('Input Projection: %s', self.input_projection)
        logging.info('Output Projection: %s', self.output_projection)

    def set_bluesky_output_dir(self, args):
        self.bluesky_output_dir = os.path.abspath(args.bluesky_output_dir)
        logging.info('Bluesky output dir: %s', self.bluesky_output_dir)

    def read_grid_info(self):
        with open(os.path.join(self.bluesky_output_dir, 'grid_info.json')) as f:
            data = json.loads(f.read())
            self.sw_lng = data['bbox'][0]
            self.sw_lat = data['bbox'][1]
            self.ne_lng = data['bbox'][2]
            self.ne_lat = data['bbox'][3]

    def set_image_dirs(self, args):
        self.input_images_dir = os.path.join(self.bluesky_output_dir, args.input_images_dir)
        self.output_images_dir = (os.path.join(self.bluesky_output_dir,  args.output_images_dir)
            if args.output_images_dir else self.input_images_dir)
        logging.info('input_images_dir: %s', self.input_images_dir)
        logging.info('output_images_dir: %s', self.output_images_dir)

    def backup_images(self):
        if self.input_images_dir == self.output_images_dir:
            self.backup_dir = (self.input_images_dir.rstrip('/')
                + datetime.datetime.now().strftime('%Y%m%d%H%M%S'))
            shutil.copytree(self.input_images_dir, self.backup_dir)
        else:
            self.backup_dir = None
            logging.info("Creating output images dir")
            os.makedirs(self.output_images_dir, exist_ok=True)


    ## Projecting

    SMOKE_IMAGE_MATCHER = re.compile('.*_[0-9]{6,12}.png')

    def get_image_files(self):
        image_files = []
        for root, dirs, files in os.walk(self.input_images_dir):
            for file in files:
                if self.SMOKE_IMAGE_MATCHER.match(file):
                    image_files.append(os.path.join(root,file))

        if not image_files:
            raise RuntimeError("No dispersion images found under %s",
                input_images_dir)

        return image_files

    def run_command(self, *cmd_args):
        cmd_args = [str(e) for e in cmd_args]
        logging.debug("Running: %s", ' '.join(cmd_args))
        subprocess.run(cmd_args)
        #subprocess.call(cmd_args)
        #os.system(' '.join(cmd_args))


    def reproject_image(self, input_image_file):
        logging.info("reprojecting %s", input_image_file)

        output_dir = os.path.dirname(input_image_file).replace(
            self.input_images_dir, self.output_images_dir)
        os.makedirs(output_dir, exist_ok=True)
        temp_tif_1 = os.path.join(output_dir, 'temp1.tif')
        temp_tif_2 = os.path.join(output_dir, 'temp2.tif')
        output_image_file = os.path.join(output_dir,
            os.path.basename(input_image_file))

        self.run_command('gdal_translate', '-a_srs', self.input_projection,
            '-a_ullr', self.sw_lng, self.ne_lat, self.ne_lng, self.sw_lat,
            input_image_file, temp_tif_1)

        self.run_command('gdalwarp', '-t_srs', self.output_projection,
            temp_tif_1, temp_tif_2)

        self.run_command('gdal_translate', '-of', 'PNG',
            temp_tif_2, output_image_file)

    def reproject(self):
        try:
            for i in self.get_image_files():
                self.reproject_image(i)

        except Exception as e:
            if self.backup_dir:
                shutil.rmtree(self.input_images_dir)
                shutil.move(self.backup_dir, self.input_images_dir)
            logging.error("Failed: %s", e)
            logging.debug(traceback.format_exc())
            sys.exit(1)

        else:
            if self.backup_dir:
                shutil.rmtree(self.backup_dir)
            logging.info("Finished")

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)

    args = parse_args()
    reprojector = ImageReprojector(args)
    reprojector.reproject()
